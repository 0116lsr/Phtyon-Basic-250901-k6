# ========================================
# 파이썬 기초 2장: 함수와 문자열 처리
# ========================================
# 
# 📚 상세 학습 가이드: 학습가이드/02-함수와문자열처리.md
# 🔗 관련 챕터: 2장 - 함수와 문자열 처리
# 
# 이 파일은 파이썬의 함수 정의, 호출, 그리고 문자열 처리 방법을 학습하는 예제입니다.
# 함수는 코드를 재사용 가능하게 만들어주는 파이썬의 핵심 기능입니다.

# ========================================
# 📌 함수 정의와 호출 학습
# ========================================
# 
# 함수는 특정 작업을 수행하는 코드 블록을 하나로 묶어 이름을 붙인 것입니다.
# 📖 더 자세한 내용: 학습가이드/02-함수와문자열처리.md#1-함수-function

def greet(name, age=20):
    """
    인사말을 출력하는 함수
    
    매개변수:
        name (str): 이름
        age (int): 나이 (기본값: 20)
    
    반환값:
        str: 인사말 문자열
    """
    return f"안녕하세요, {name}님! {age}세이시군요."

# 함수 호출 예시
print("=== 함수 호출 예시 ===")
message1 = greet("홍길동", 25)
print(message1)

message2 = greet("김철수")  # age는 기본값 20 사용
print(message2)

# ========================================
# 📌 참조에 의한 호출 vs 값에 의한 호출
# ========================================
# 
# 파이썬에서는 데이터 타입에 따라 함수에 전달되는 방식이 다릅니다.
# 📖 더 자세한 내용: 학습가이드/02-함수와문자열처리.md#3-참조에-의한-호출-vs-값에-의한-호출

def modify_value(x):
    """값을 수정하는 함수 (값에 의한 호출)"""
    x = 100
    print(f"함수 내부: {x}")

def modify_list(lst):
    """리스트를 수정하는 함수 (참조에 의한 호출)"""
    lst.append(100)
    print(f"함수 내부: {lst}")

print("\n=== 값에 의한 호출 (기본 타입) ===")
num = 10
print(f"함수 호출 전: {num}")
modify_value(num)
print(f"함수 호출 후: {num}")  # 원본이 변경되지 않음

print("\n=== 참조에 의한 호출 (리스트) ===")
my_list = [1, 2, 3]
print(f"함수 호출 전: {my_list}")
modify_list(my_list)
print(f"함수 호출 후: {my_list}")  # 원본이 변경됨

# ========================================
# 📌 전역 변수와 지역 변수
# ========================================
# 
# 변수는 사용 범위에 따라 전역 변수와 지역 변수로 나뉩니다.
# 📖 더 자세한 내용: 학습가이드/02-함수와문자열처리.md#4-전역-변수와-지역-변수

# 전역 변수
global_count = 0

def increment_counter():
    """카운터를 증가시키는 함수"""
    global global_count  # 전역 변수 사용 선언
    global_count += 1
    print(f"카운터: {global_count}")

print("\n=== 전역 변수 사용 ===")
increment_counter()
increment_counter()
print(f"최종 카운터 값: {global_count}")

# ========================================
# 📌 가변 인수 (*args, **kwargs)
# ========================================
# 
# 함수에 전달할 인수의 개수가 정해지지 않았을 때 사용하는 방법입니다.
# 📖 더 자세한 내용: 학습가이드/02-함수와문자열처리.md#5-가변-인수

def sum_all(*args):
    """여러 개의 숫자를 받아 합계를 계산하는 함수"""
    total = 0
    for num in args:
        total += num
    return total

def print_info(**kwargs):
    """키워드 인수를 받아 정보를 출력하는 함수"""
    for key, value in kwargs.items():
        print(f"{key}: {value}")

print("\n=== 가변 인수 사용 ===")
result = sum_all(1, 2, 3, 4, 5)
print(f"합계: {result}")

print_info(name="이영희", age=30, city="서울")

# ========================================
# 📌 문자열 슬라이싱
# ========================================
# 
# 문자열의 일부분을 추출하는 방법입니다.
# 📖 더 자세한 내용: 학습가이드/02-함수와문자열처리.md#6-문자열-슬라이싱

def demonstrate_string_slicing():
    """문자열 슬라이싱 예시를 보여주는 함수"""
    text = "Hello, Python!"
    
    print("\n=== 문자열 슬라이싱 예시 ===")
    print(f"원본 문자열: {text}")
    print(f"처음 5글자: {text[0:5]}")      # "Hello"
    print(f"마지막 6글자: {text[-6:]}")    # "Python"
    print(f"역순: {text[::-1]}")           # "!nohtyP ,olleH"
    print(f"2칸씩 건너뛰기: {text[::2]}")  # "Hlo yhn"

demonstrate_string_slicing()

# ========================================
# 📌 파일 처리
# ========================================
# 
# 파일을 읽고 쓰는 방법을 학습합니다.
# 📖 더 자세한 내용: 학습가이드/02-함수와문자열처리.md#7-파일-처리

def create_sample_file():
    """샘플 파일을 생성하는 함수"""
    with open("sample.txt", "w", encoding="utf-8") as file:
        file.write("안녕하세요!\n")
        file.write("파이썬 파일 처리 예제입니다.\n")
        file.write("이 파일은 자동으로 생성되었습니다.\n")
    print("샘플 파일이 생성되었습니다: sample.txt")

def read_file_content():
    """파일 내용을 읽어서 출력하는 함수"""
    try:
        with open("sample.txt", "r", encoding="utf-8") as file:
            content = file.read()
            print("\n=== 파일 내용 ===")
            print(content)
    except FileNotFoundError:
        print("파일을 찾을 수 없습니다.")

# 파일 처리 실행
print("\n=== 파일 처리 예시 ===")
create_sample_file()
read_file_content()

# ========================================
# 💡 학습 정리
# ========================================
# 
# 이 파일에서 학습한 내용:
# 1. 함수 정의와 호출 방법
# 2. 매개변수와 반환값 사용
# 3. 참조에 의한 호출과 값에 의한 호출의 차이
# 4. 전역 변수와 지역 변수 사용법
# 5. 가변 인수 (*args, **kwargs) 활용
# 6. 문자열 슬라이싱 기법
# 7. 파일 읽기/쓰기 방법
# 
# 📚 다음 단계: 학습가이드/03-자료구조심화.md
